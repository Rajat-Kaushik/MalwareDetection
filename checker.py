#! /usr/bin/python2
# pefile is a Python module to read and work with PE (Portable Executable) files.
import pefile
import os
import array
import math
import pickle
import joblib
import sys
import argparse
import os
import sys
import shutil
import time
import re
import pandas as pd

from flask import Flask, request, jsonify, render_template, abort, redirect, url_for
from werkzeug import secure_filename
import joblib
from sklearn.ensemble import RandomForestClassifier


# def cutit(s, n):
# return s[n:]


app = Flask(__name__)
app.config['SEND_FILE_MAX_AGE_DEFAULT'] = 300


@app.route('/')
def home():
    return render_template('index1.html')


@app.route('/uploader', methods=['GET', 'POST'])
def upload_file():
    if request.method == 'POST':
        f = request.files['file']
        f.save(secure_filename(f.filename))
        ##########################################
        # Load classifier
        clf = joblib.load(os.path.join(os.path.dirname(
            os.path.realpath(__file__)), 'classifier/classifier.pkl'))
        features = pickle.loads(open(os.path.join(os.path.dirname(
            os.path.realpath(__file__)), 'classifier/features.pkl'), 'rb').read())
        ##########################################
        #tweet = request.form['tweet']
        #tweet=cutit(f.filename, 12)
        tweet = f.filename
        print(tweet)
        #########################################
        data = extract_infos(tweet)
        pe_features = list(map(lambda x: data[x], features))
        res = clf.predict([pe_features])[0]
        #########################################
        #print('The file %s is %s' % (os.path.basename(sys.argv[1]),['malicious', 'legitimate'][res]))

        return render_template('result.html', prediction=['legitimate', 'malicious'][res])


# The phrase File Entropy is used to measure the amount of data which is present in a selected file. For example, if you have some files and desire to calculate the entropy value for that, then it will be very simple by accessing the methods of File Entropy and its calculation process.
def get_entropy(data):
    if len(data) == 0:
        return 0.0
    occurences = array.array('L', [0] * 256)
    for x in data:
        occurences[x if isinstance(x, int) else ord(x)] += 1

    entropy = 0
    for x in occurences:
        if x:
            p_x = float(x) / len(data)
            entropy -= p_x * math.log(p_x, 2)

    return entropy


def get_resources(pe):
    """Extract resources :
    [entropy, size]"""
    resources = []
    if hasattr(pe, 'DIRECTORY_ENTRY_RESOURCE'):
        try:
            for resource_type in pe.DIRECTORY_ENTRY_RESOURCE.entries:
                if hasattr(resource_type, 'directory'):
                    for resource_id in resource_type.directory.entries:
                        if hasattr(resource_id, 'directory'):
                            for resource_lang in resource_id.directory.entries:
                                data = pe.get_data(resource_lang.data.struct.OffsetToData,
                                                   resource_lang.data.struct.Size)
                                size = resource_lang.data.struct.Size
                                entropy = get_entropy(data)

                                resources.append([entropy, size])
        except Exception as e:
            return resources
    return resources


def get_version_info(pe):
    """Return version infos"""
    res = {}
    for fileinfo in pe.FileInfo:
        if fileinfo.Key == 'StringFileInfo':
            for st in fileinfo.StringTable:
                for entry in st.entries.items():
                    res[entry[0]] = entry[1]
        if fileinfo.Key == 'VarFileInfo':
            for var in fileinfo.Var:
                res[var.entry.items()[0][0]] = var.entry.items()[0][1]
    if hasattr(pe, 'VS_FIXEDFILEINFO'):
        res['flags'] = pe.VS_FIXEDFILEINFO.FileFlags
        res['os'] = pe.VS_FIXEDFILEINFO.FileOS
        res['type'] = pe.VS_FIXEDFILEINFO.FileType
        res['file_version'] = pe.VS_FIXEDFILEINFO.FileVersionLS
        res['product_version'] = pe.VS_FIXEDFILEINFO.ProductVersionLS
        res['signature'] = pe.VS_FIXEDFILEINFO.Signature
        res['struct_version'] = pe.VS_FIXEDFILEINFO.StrucVersion
    return res
