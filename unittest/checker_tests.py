from werkzeug.wrappers import response
from checker import app, get_entropy, get_resources, extract_infos
import unittest
from io import BytesIO
from io import StringIO
import pefile
import os


#Reading .exe file
f = open("C:\\Users\\rajat\\Desktop\\tool\\src\\main\\python\\testFiles\\Test.exe", 'r+b')


#Fetching the name of the .exe file
tweet = f.name

#Storing the pe data
pe = pefile.PE(tweet)

resource = [[2.8263263497544875, 1638], [3.9323149753672455, 67624], [7.988411948605349, 51130], [4.216557924605184, 9640], [4.5757847638998035, 4264], [5.047638217050617, 1128], [0.0, 744], [0.0, 296], [2.7181283414635034, 180], [2.5619336722400545, 288], [2.709923609439092, 344], [2.6738519150703666, 512], [2.911481510640998, 248], [2.521832286364883, 160], [2.9278652947556, 238], [2.772224158185059, 164], [2.5801109554596726, 272], [2.728487923183982, 328], [2.6699521762917313, 496], [2.9651111085997504, 232], [2.5751226095161033, 144], [3.036549043638284, 222], [2.6344670522935143, 160], [2.476538022789633, 268], [2.6536369821735586, 324], [2.6155970641581123, 492], [2.8662631449880314, 228], [2.4032005566780104, 140], [2.930400865292582, 218], [2.9597909217852703, 180], [2.8448740653287192, 288], [3.0639015136026315, 344], [2.9721925484763854, 512], [3.109661753584623, 248], [2.794549781070437, 160], [3.065842343181098, 238], [2.621967052293514, 160], [2.4840007093567973, 268], [2.6598098216797315, 324], [2.6099976993163168, 492], [2.862952234890823, 228], [2.4032005566780104, 140], [2.926938078585411, 218], [2.9597909217852703, 180], [2.8448740653287192, 288], [3.0639015136026315, 344], [2.9721925484763854, 512], [3.109661753584623, 248], [2.794549781070437, 160], [3.065842343181098, 238], [2.9597909217852703, 180], [2.8448740653287192, 288], [3.0639015136026315, 344], [2.9721925484763854, 512], [3.109661753584623, 248], [2.794549781070437, 160], [3.065842343181098, 238], [2.8526643581044318, 172], [2.645413301143992, 280], [2.7967957866047803, 336], [2.7164284282286997, 504], [3.0469630822504836, 240], [2.6735557019865324, 152], [3.0967422741996, 230], [2.900024599186317, 104], [5.110841105015723, 543]]


res = {'Machine': 332, 'SizeOfOptionalHeader': 224, 'Characteristics': 258, 'MajorLinkerVersion': 10, 'MinorLinkerVersion': 0, 'SizeOfCode': 29696, 'SizeOfInitializedData': 489984, 'SizeOfUninitializedData': 16896, 'AddressOfEntryPoint': 14511, 'BaseOfCode': 4096, 'BaseOfData': 36864, 'ImageBase': 4194304, 'SectionAlignment': 4096, 'FileAlignment': 512, 'MajorOperatingSystemVersion': 5, 'MinorOperatingSystemVersion': 0, 'MajorImageVersion': 6, 'MinorImageVersion': 0, 'MajorSubsystemVersion': 5, 'MinorSubsystemVersion': 0, 'SizeOfImage': 1474560, 'SizeOfHeaders': 1024, 'CheckSum': 0, 'Subsystem': 2, 'DllCharacteristics': 34112, 'SizeOfStackReserve': 1048576, 'SizeOfStackCommit': 4096, 'SizeOfHeapReserve': 1048576, 'SizeOfHeapCommit': 4096, 'LoaderFlags': 0, 'NumberOfRvaAndSizes': 16, 'SectionsNb': 6, 'SectionsMeanEntropy': 3.214558784941611, 'SectionsMinEntropy': 0.0, 'SectionsMaxEntropy': 6.499708590628113, 'SectionsMeanRawsize': 33621.333333333336, 'SectionsMinRawsize': 0, 'SectionsMaxRawsize': 156160, 'SectionsMeanVirtualsize': 243460.66666666666, 'SectionsMinVirtualsize': 4054, 'SectionMaxVirtualsize': 790528, 'ImportsNbDLL': 8, 'ImportsNb': 172, 'ImportsNbOrdinal': 1, 'ExportNb': 0, 'ResourcesNb': 66, 'ResourcesMeanEntropy': 2.944855243077482, 'ResourcesMinEntropy': 0.0, 'ResourcesMaxEntropy': 7.988411948605349, 'ResourcesMeanSize': 2309.439393939394, 'ResourcesMinSize': 104, 'ResourcesMaxSize': 67624, 'LoadConfigurationSize': 0, 'VersionInformationSize': 0}

ent = 2.900024599186317

data= b'\x00\x00\x01\x00\x05\x00\x00\x00\x00\x00\x01\x00 \x00\xba\xc7\x00\x00\x02\x00\x80\x80\x00\x00\x01\x00 \x00(\x08\x01\x00\x01\x0000\x00\x00\x01\x00 \x00\xa8%\x00\x00\x03\x00  \x00\x00\x01\x00 \x00\xa8\x10\x00\x00\x04\x00\x10\x10\x00\x00\x01\x00 \x00h\x04\x00\x00\x05\x00\x00\x94\xe6\x01\x04\x00\x00\x00\x10\x10\x00\x00\x01\x00 \x00h\x04\x00\x00\x18x\xf0\x01\xf3\x00\x00\x00'


class FlaskTestCase(unittest.TestCase):


    #Testing the home route
    def test_index(self):
        tester = app.test_client(self)
        response = tester.get("/")
        statuscode = response.status_code
        self.assertEqual(statuscode,200)

    #Testing the uploader route
    def test_uploader(self):
        tester = app.test_client(self)
        response = tester.get("/uploader")
        statuscode = response.status_code
        self.assertEqual(statuscode,200)

    #Testing the uploaded content type   
    def test_uploader_post(self):
        tester = app.test_client(self)
        response = tester.post("/uploader")
        self.assertEqual(response.content_type, 'text/html; charset=utf-8')


    #Testing the home content type    
    def test_index_content(self):
        tester = app.test_client(self)
        response = tester.get("/")
        self.assertEqual(response.content_type, 'text/html; charset=utf-8')

    #Matching the content of the home page
    def test_index_data(self):
        tester = app.test_client(self)
        response = tester.get("/")
        self.assertTrue(b'begin' in response.data)

    #Verifying the base case of the get entropy function
    def test_entropy_data(self):        
        actual = get_entropy("")
        expected = 0.0
        self.assertEqual(actual, expected)


    
    #Verifying the actual entropy with the expected entropy
    def test_entropy_res_data(self):        
        actual = get_entropy(data)
        expected = ent
        self.assertEqual(actual, expected)

   #Verifying the actual resources data with the expected resources data
    def test_resources_data(self):        
        actual = get_resources(pe)
        expected = resource
        self.assertEqual(actual, expected)

    #Verifying the actual infodata with the expected info data
    def test_infos_data(self):        
        actual = extract_infos(tweet)
        expected = res
        self.assertEqual(actual, expected)
    

    

if __name__ == "__main__":
    unittest.main()
    
    


